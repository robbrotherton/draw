// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// line_intersection
DataFrame line_intersection(NumericVector P1, NumericVector P2, NumericVector P3, NumericVector P4, bool include_lineend);
RcppExport SEXP _draw_line_intersection(SEXP P1SEXP, SEXP P2SEXP, SEXP P3SEXP, SEXP P4SEXP, SEXP include_lineendSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type P2(P2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type P3(P3SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type P4(P4SEXP);
    Rcpp::traits::input_parameter< bool >::type include_lineend(include_lineendSEXP);
    rcpp_result_gen = Rcpp::wrap(line_intersection(P1, P2, P3, P4, include_lineend));
    return rcpp_result_gen;
END_RCPP
}
// line_intersection_lgl
bool line_intersection_lgl(NumericVector P1, NumericVector P2, NumericVector P3, NumericVector P4, bool include_lineend);
RcppExport SEXP _draw_line_intersection_lgl(SEXP P1SEXP, SEXP P2SEXP, SEXP P3SEXP, SEXP P4SEXP, SEXP include_lineendSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type P2(P2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type P3(P3SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type P4(P4SEXP);
    Rcpp::traits::input_parameter< bool >::type include_lineend(include_lineendSEXP);
    rcpp_result_gen = Rcpp::wrap(line_intersection_lgl(P1, P2, P3, P4, include_lineend));
    return rcpp_result_gen;
END_RCPP
}
// point_in_polygon
bool point_in_polygon(double x, double y, DataFrame polygon, bool include_perimeter);
RcppExport SEXP _draw_point_in_polygon(SEXP xSEXP, SEXP ySEXP, SEXP polygonSEXP, SEXP include_perimeterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    Rcpp::traits::input_parameter< DataFrame >::type polygon(polygonSEXP);
    Rcpp::traits::input_parameter< bool >::type include_perimeter(include_perimeterSEXP);
    rcpp_result_gen = Rcpp::wrap(point_in_polygon(x, y, polygon, include_perimeter));
    return rcpp_result_gen;
END_RCPP
}
// points_in_polygon
LogicalVector points_in_polygon(DataFrame points, DataFrame polygon);
RcppExport SEXP _draw_points_in_polygon(SEXP pointsSEXP, SEXP polygonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type points(pointsSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type polygon(polygonSEXP);
    rcpp_result_gen = Rcpp::wrap(points_in_polygon(points, polygon));
    return rcpp_result_gen;
END_RCPP
}
// clip_paths
List clip_paths(DataFrame hatch_segs, DataFrame polygon);
RcppExport SEXP _draw_clip_paths(SEXP hatch_segsSEXP, SEXP polygonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type hatch_segs(hatch_segsSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type polygon(polygonSEXP);
    rcpp_result_gen = Rcpp::wrap(clip_paths(hatch_segs, polygon));
    return rcpp_result_gen;
END_RCPP
}
// clip_paths_complex
List clip_paths_complex(DataFrame hatch_segs, DataFrame polygon);
RcppExport SEXP _draw_clip_paths_complex(SEXP hatch_segsSEXP, SEXP polygonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type hatch_segs(hatch_segsSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type polygon(polygonSEXP);
    rcpp_result_gen = Rcpp::wrap(clip_paths_complex(hatch_segs, polygon));
    return rcpp_result_gen;
END_RCPP
}
// approxEqual
bool approxEqual(double a, double b, double e);
RcppExport SEXP _draw_approxEqual(SEXP aSEXP, SEXP bSEXP, SEXP eSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type e(eSEXP);
    rcpp_result_gen = Rcpp::wrap(approxEqual(a, b, e));
    return rcpp_result_gen;
END_RCPP
}
// spiral
DataFrame spiral(int coils, int points, double radius, double inner_radius);
RcppExport SEXP _draw_spiral(SEXP coilsSEXP, SEXP pointsSEXP, SEXP radiusSEXP, SEXP inner_radiusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type coils(coilsSEXP);
    Rcpp::traits::input_parameter< int >::type points(pointsSEXP);
    Rcpp::traits::input_parameter< double >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< double >::type inner_radius(inner_radiusSEXP);
    rcpp_result_gen = Rcpp::wrap(spiral(coils, points, radius, inner_radius));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_draw_line_intersection", (DL_FUNC) &_draw_line_intersection, 5},
    {"_draw_line_intersection_lgl", (DL_FUNC) &_draw_line_intersection_lgl, 5},
    {"_draw_point_in_polygon", (DL_FUNC) &_draw_point_in_polygon, 4},
    {"_draw_points_in_polygon", (DL_FUNC) &_draw_points_in_polygon, 2},
    {"_draw_clip_paths", (DL_FUNC) &_draw_clip_paths, 2},
    {"_draw_clip_paths_complex", (DL_FUNC) &_draw_clip_paths_complex, 2},
    {"_draw_approxEqual", (DL_FUNC) &_draw_approxEqual, 3},
    {"_draw_spiral", (DL_FUNC) &_draw_spiral, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_draw(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
